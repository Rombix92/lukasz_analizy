## tabela porownujaca oba kanaly ze soba - df_final_channel----
df_list_2<-list()
if (df_mapowanie_metryk$kanal[i]==input_wybor_kanal & df_mapowanie_metryk$okres_nazwa_skrot[i] =='tdt'){
for (wybor_kanal_temp in c('CC', 'FO')){
df_all <- df_list[[paste0('df_all-',wybor_kanal_temp,'-',df_mapowanie_metryk$okres_nazwa_skrot[i])]]
df <- df_list[[paste0('df-',wybor_kanal_temp,'-',df_mapowanie_metryk$okres_nazwa_skrot[i])]]
df_analizowana_filt<- df %>% filter(data >= df_mapowanie_metryk$start_analizowany[i] & data <= df_mapowanie_metryk$end_analizowany[i])
df_analizowana <- df_analizowana_filt %>%
group_by_(.dots = input_wybor_obiekt) %>%
summarise(N_lead_A=sum(as.numeric(lead_n), na.rm = TRUE),
N_sprzedaz_A=sum(as.numeric(sprzedaze), na.rm = TRUE),
C2_A=as.numeric(N_sprzedaz_A)/as.numeric(N_lead_A),
srednia_cena_A=sum(as.numeric(obrot), na.rm = TRUE)/as.numeric(N_sprzedaz_A),
obrot_A=sum(as.numeric(obrot),na.rm=TRUE))
df_porownawcza_filt <- df %>% filter(data >= df_mapowanie_metryk$start_porow[i] & data <= df_mapowanie_metryk$end_porow[i])
df_porownawcza <-df_porownawcza_filt %>%
group_by_(.dots = input_wybor_obiekt) %>%
summarise(N_lead_P=sum(lead_n, na.rm = TRUE),
N_sprzedaz_P=sum(sprzedaze, na.rm = TRUE),
C2_P=N_sprzedaz_P/N_lead_P,
srednia_cena_P=sum(obrot, na.rm = TRUE)/N_sprzedaz_P,
obrot_P=sum(obrot,na.rm=TRUE))
df_final_temp <-df_porownawcza  %>%
full_join(df_analizowana, by=c(input_wybor_obiekt))
df_final_temp[is.na(df_final_temp)]<-0
#wstawiam 0.0000001 w miejsce zer
df_final_temp <-df_final_temp %>% mutate(N_lead_P = ifelse(N_lead_P==0 & N_lead_A >0, 0.00000001,N_lead_P),
C2_P = ifelse(C2_P==0 & C2_A >0, 0.00000001,C2_P),
N_sprzedaz_P = ifelse(N_sprzedaz_P==0 & N_sprzedaz_A >0, 0.00000001,N_sprzedaz_P),
srednia_cena_P = ifelse(srednia_cena_P==0, srednia_cena_A,srednia_cena_P))
df_final_temp <- df_final_temp %>% mutate(lead=(N_lead_A-N_lead_P)/N_lead_P,
C2=(C2_A-C2_P)/C2_P,
sprzedaz=(N_sprzedaz_A-N_sprzedaz_P)/N_sprzedaz_P,
srednia_cena=(srednia_cena_A-srednia_cena_P)/srednia_cena_P,
wplyw_lead=N_lead_P*lead*C2_P*srednia_cena_P,
wplyw_C2=N_lead_A*C2*C2_P*srednia_cena_P,
wplyw_sprzedazy=N_sprzedaz_P*sprzedaz*srednia_cena_P,
wplyw_srednia_cena = N_sprzedaz_A*srednia_cena_P*srednia_cena,
zmiana_laczna=wplyw_sprzedazy+wplyw_srednia_cena) %>% select(-obrot_A,-obrot_P)
df_final_temp <- df_final_temp %>% arrange(desc(zmiana_laczna))
df_list_2[[paste0('df_final-',wybor_kanal_temp)]] <- df_final_temp %>% mutate(kanal=wybor_kanal_temp) %>%
select(kanal,everything())
}
df_final_channel <-purrr::reduce(df_list_2, rbind) %>% arrange(zmiana_laczna)
df_final_channel_biggest_change <-purrr::reduce(df_list_2, full_join, by=c(input_wybor_obiekt),suffix = c(".CC", ".FO")) %>%
select(matches(paste0(input_wybor_obiekt,'|kanal|zmiana_lacz'))) %>% mutate_at(vars(c('zmiana_laczna.CC','zmiana_laczna.FO')), ~tidyr::replace_na(.,0)) %>%
mutate(roznica_na_korzysc_CC=zmiana_laczna.CC-zmiana_laczna.FO) %>% arrange(desc(roznica_na_korzysc_CC)) %>% select(-matches('kanal'))
df_list_final[[paste0('df_final_channel_biggest_change-',
df_mapowanie_metryk$kanal[i],'-',
df_mapowanie_metryk$okres_nazwa_skrot[i])]] <- df_final_channel_biggest_change
}
}
#kwantyle do kolorowania ----
breaks_lead <-  quantile(df_final$lead, probs = seq(.05, .95, .1), na.rm = TRUE)
breaks_C2 <-  quantile(df_final$C2, probs = seq(.05, .95, .1), na.rm = TRUE)
breaks_sprzedaz <-  quantile(df_final$sprzedaz, probs = seq(.05, .95, .1), na.rm = TRUE)
breaks_srednia_cena <-  quantile(df_final$srednia_cena, probs = seq(.05, .95, .1), na.rm = TRUE)
breaks_zmiana_laczna <-  quantile(df_final$zmiana_laczna, probs = seq(.05, .95, .1), na.rm = TRUE)
#skale kolorow dla kwantyly ----
colors <-  round(seq(255, 0, length.out = length(breaks_sprzedaz) + 1), 0) %>% {paste0("rgb(",.,",",255-., ",0)")}
#tworzenie shcematu tabeli ----
sketch_df_final_tot = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(colspan = 4, 'Okres porownawczy'),
th(colspan = 4, 'Okres analizowany'),
th(colspan = 4, 'Zmiana'),
th(colspan = 2, 'Wplyw na Sprzedaz'),
th(colspan = 2, 'Wplyw na Obrot'),
th(rowspan = 2, 'Zmiana Obrot')
),
tr(
lapply(rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'), 2), th),
lapply(rep(c('N Lead', 'C2','sprzedaz','srednia_cena'), 2), th)
)
)
))
sketch_df_final = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 2, 'Kraj/Organizator'),
th(colspan = 4, 'Okres porownawczy'),
th(colspan = 4, 'Okres analizowany'),
th(colspan = 4, 'Zmiana'),
th(colspan = 2, 'Wplyw na Sprzedaz'),
th(colspan = 2, 'Wplyw na Obrot'),
th(rowspan = 2, 'Zmiana TOTAL')
),
tr(
lapply(rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'), 2), th),
lapply(rep(c('N Lead', 'C2','sprzedaz','srednia_cena'), 2), th)
)
)
))
sketch_df_change = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 2, 'Kraj/Organizator'),
th(rowspan = 2, 'Kraj/Organizator'),
th(colspan = 4, 'Okres porownawczy'),
th(colspan = 4, 'Okres analizowany'),
th(colspan = 4, 'Zmiana'),
th(colspan = 4, 'Wplyw Zmiany'),
th(rowspan = 2, 'Zmiana TOTAL')
),
tr(
lapply(rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'), 2), th),
lapply(rep(c('N Lead', 'C2','sprzedaz','srednia_cena'), 2), th)
)
)
))
sketch_df_cena = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 2, 'Kraj/Organizator'),
th(colspan = 4, 'Okres porownawczy'),
th(colspan = 3, 'Okres analizowany'),
th(colspan = 2, 'Zmiana'),
th(colspan = 2, 'Wplyw Zmiany'),
th(rowspan = 2, 'Zmiana TOTAL')
),
tr(
lapply(c('N sprzedaz','Udzial sprzedazy','Srednia cena','Srednia cena - normaliz.'), th),
lapply(c('N sprzedaz','Udzial sprzedazy','Srednia cena'), th),
lapply(rep(c('Udzial', 'Cena'), 2), th)
)
)
))
sketch_df_final_channel = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 2, 'Kanal'),
th(rowspan = 2, 'Kraj/Organizator'),
th(colspan = 4, 'Okres porownawczy'),
th(colspan = 4, 'Okres analizowany'),
th(colspan = 4, 'Zmiana'),
th(colspan = 2, 'Wplyw na Sprzedaz'),
th(colspan = 2, 'Wplyw na Obrot'),
th(rowspan = 2, 'Zmiana TOTAL')
),
tr(
lapply(rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'), 2), th),
lapply(rep(c('N Lead', 'C2','sprzedaz','srednia_cena'), 2), th)
)
)
))
#pod generowanie tekstu ponizej
df_final_tot = df_list_final[paste0('df_final_tot-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]]
wniosek_leady<-"
> **WNIOSKI dot. leadów**
> **TDT**:
> \n Ilość leadów w CC spadła, w podobnym stopniu co w FO (ok 8%). Mniej w obecnym tygodniu było leadów telefonicznych (- 1 pkt. %) zaś więcej FO (+ 1 pkt. %).
"
wniosek_c2<-"
> **WNIOSKI dot. C2**
> **TDT**:
> \n C2 w CC wzrosła TDT aż o 13 % (+ 4 pkt. %) podczas gdy w FO jedynie o 3 %. Na wzrost C2 w CC wpływ miało podniesie jej na kanale 'WWW' oraz 'full-online'. Patrz 'dekompozycja c2' -> TDT
"
wniosek_srednia_cena<-"
> **WNIOSKI dot. Średniej Ceny**
> **TDT**:
> \n Średnia Cena w kanale CC spadła o 8%. Głównym powodem spadku średniej ceny jest silny spadek na Egipcie z zl 10 391 do  7 949 zł Pozytywny wpływ na średnią ceną miała zwiększona sprzedaż bardzo drogiego Wietnamu.
"
DT::datatable(data = df_list_final[paste0('df_final_tot-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] ,
filter='none',
#extensions = 'Buttons',
options = list(dom = "Blfrtip",
pageLength = 10,
lengthMenu = c(10, 25, 200),
scrollX=TRUE,
buttons = c('copy', 'csv', 'excel'), columnDefs = list(list(className = 'dt-center',targets="_all"))),
rownames = FALSE,
container = sketch_df_final_tot,
class = 'white-space: nowrap')  %>%
formatStyle(c(1:4),  color = 'black', backgroundColor = 'Bisque', fontWeight = 'bold')  %>%
formatStyle(c(5:8),  color = 'black', backgroundColor = 'Thistle', fontWeight = 'bold')  %>%
formatCurrency(c(5,9,14,15,16,17,18)-1,' zl ', interval = 3, mark = " ", digits = 1) %>%
formatPercentage(c(4,8,10,11,12,13)-1, digits = 1) %>%
formatRound(c(2,3,6,7)-1, digits = 0, interval = 3, mark = " ")
x<- rbind(
df_list_final[paste0('df_final_tot-','CC','-',okres_nazwa_skrot)][[1]],
df_list_final[paste0('df_final_tot-','FO','-',okres_nazwa_skrot)][[1]],
df_list_final[paste0('df_final_tot-','CC','-','rdr')][[1]]
)  %>% cbind(data.frame(typ=c(paste0('CC','-',okres_nazwa_skrot),
paste0('FO','-',okres_nazwa_skrot),
paste0('CC','-','rdr'))),.) %>% select(-matches('_A$|_P$|wplyw')) %>% mutate_if(is.numeric,round,digits=2)
x1<-data.table::dcast(melt(x, id.vars = "typ"), variable ~ typ) %>% rename(element_funnelu=variable)
x1 %>% tabela(kolorowac_ujemne_dodatnie=TRUE,colnames_to_color=c('CC-rdr','CC-tdt','FO-tdt'),filter_var='none',
caption='zmiana wyrażony w procentach')
dh <- df_list_final[paste0('df_final_tot-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>% fun_formatowanie_zmiennych()%>%
as_hux() %>%
set_contents(row=1,  value=c(rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'),2),
rep(c('N Lead', 'C2','N sprzedaz','Srednia cena'),2),'Zmiana TOTAL'))%>%
insert_row("Okres porownawczy", rep("",3),
"Okres analizowany", rep("",3),
"Zmiana", rep("",3),
"Wplyw na sprzedaz", rep("",1),
"Wplyw na obrot", rep("",1),
""
, after = 0) %>%
merge_cells(1, c(1:4)) %>%
merge_cells(1, c(5:8))%>%
merge_cells(1, c(9:12)) %>%
merge_cells(1, c(13:14)) %>%
merge_cells(1, c(15:16)) %>%
set_align('right') %>%
set_align(1, everywhere, "left") %>%
set_position("left") %>% #table left-aligned on the page
#set_tb_padding(1, everywhere, 0) %>%
set_bold(1, everywhere)%>%
theme_orange() %>%
set_header_rows(1:2, TRUE) %>%
style_headers(bold = TRUE, text_color = "grey40")
# set_font_size(6) %>%
# set_width(1.6) %>%
# set_align('right') %>%
# set_align(1, everywhere, "left") %>%
# set_position("left") %>% #table left-aligned on the page
quick_html(dh, file = "ahuxtable1.html", open = FALSE)
# higher zoom increases resolution and image size
# you may need to run "webshot::install_phantomjs()" for this to work
webshot::webshot(url = "ahuxtable1.html", file = "ahuxtable1.png",
zoom = 1, selector = "table")
DT::datatable(data = df_list_final[paste0('df_final-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%
head(5),
#filter='top',
extensions = 'Buttons',
options = list(dom = "Blfrtip",pageLength = 10, lengthMenu = c(10, 25, 200),scrollX=TRUE, buttons = c('copy', 'csv', 'excel'), columnDefs = list(list(className = 'dt-center',targets="_all"))),
rownames = FALSE,
container = sketch_df_final,
class = 'white-space: nowrap')  %>%
formatStyle(c(2:5),  color = 'black', backgroundColor = 'Bisque', fontWeight = 'bold')  %>%
formatStyle(c(6:9),  color = 'black', backgroundColor = 'Thistle', fontWeight = 'bold') %>%
#based on quartile https://rstudio.github.io/DT/010-style.html
#formatStyle(c(10:11),   backgroundColor = styleInterval(c(0.95, 1.05), c('red', 'white', 'green')), fontWeight = 'bold')
formatStyle(10,   backgroundColor = styleInterval(breaks_lead, colors), fontWeight = 'bold')  %>%
formatStyle(11,   backgroundColor = styleInterval(breaks_C2, colors), fontWeight = 'bold') %>%
formatStyle(12,   backgroundColor = styleInterval(breaks_sprzedaz, colors), fontWeight = 'bold')  %>%
formatStyle(13,   backgroundColor = styleInterval(breaks_srednia_cena, colors), fontWeight = 'bold') %>%
formatStyle(18,   backgroundColor = styleInterval(breaks_zmiana_laczna, colors), fontWeight = 'bold') %>%
#formatCurrency(c(5,9,14,15,16,17,18),' zl ', interval = 3, mark = " ", digits = 1) %>%
formatCurrency(c('srednia_cena_P','srednia_cena_A','wplyw_lead','wplyw_C2','wplyw_sprzedazy','wplyw_srednia_cena','zmiana_laczna'),' zl ', interval = 3, mark = " ", digits = 1) %>%
#formatPercentage(c(4,8,10,11,12,13), digits = 1) %>%
formatPercentage(c('C2_P','C2_A','lead','C2','sprzedaz','srednia_cena'), digits = 1) %>%
#formatRound(c(2,3,6,7), digits = 0, interval = 3, mark = " ",)
formatRound(c('N_lead_P','N_sprzedaz_P','N_lead_A','N_sprzedaz_A'), digits = 0, interval = 3, mark = " ")
dh <-df_list_final[paste0('df_final-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%
head(5) %>% fun_formatowanie_zmiennych()%>%  as_hux() %>%
set_contents(row=1,  value=c('Kraj/Organizator',rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'),2),
rep(c('N Lead', 'C2','N sprzedaz','Srednia cena'),2),'Zmiana TOTAL'))%>%
insert_row("", "Okres porownawczy", rep("",3),
"Okres analizowany", rep("",3),
"Zmiana", rep("",3),
"Wplyw na sprzedaz", rep("",1),
"Wplyw na obrot", rep("",1),
""
, after = 0) %>%
merge_cells(1, c(1:4)+1) %>%
merge_cells(1, c(5:8)+1)%>%
merge_cells(1, c(9:12)+1) %>%
merge_cells(1, c(13:14)+1) %>%
merge_cells(1, c(15:16)+1) %>%
set_align(1, everywhere, "center") %>%
set_tb_padding(1, everywhere, 0) %>%
set_bold(1, everywhere)%>%
theme_orange() %>%
set_header_rows(1:2, TRUE) %>%
set_header_cols(1, TRUE) %>%
set_background_color(odds, c(1:4)+1, "orange") %>%
set_background_color(odds, c(5:8)+1, "grey80") %>%
style_headers(bold = TRUE, text_color = "grey40")
quick_html(dh, file = "ahuxtable1.html", open = FALSE)
# higher zoom increases resolution and image size
# you may need to run "webshot::install_phantomjs()" for this to work
webshot::webshot(url = "ahuxtable1.html", file = "ahuxtable1.png",
zoom = 1, selector = "table")
DT::datatable(data =  df_list_final[paste0('df_final-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%
arrange(zmiana_laczna) %>% head(5),
#filter='top',
extensions = 'Buttons',
options = list(dom = "Blfrtip",pageLength = 10, lengthMenu = c(10, 25, 200),scrollX=TRUE, buttons = c('copy', 'csv', 'excel'), columnDefs = list(list(className = 'dt-center',targets="_all"))),
rownames = FALSE,
container = sketch_df_final,
class = 'white-space: nowrap')  %>%
formatStyle(c(2:5),  color = 'black', backgroundColor = 'Bisque', fontWeight = 'bold')  %>%
formatStyle(c(6:9),  color = 'black', backgroundColor = 'Thistle', fontWeight = 'bold') %>%
#based on quartile https://rstudio.github.io/DT/010-style.html
#formatStyle(c(10:11),   backgroundColor = styleInterval(c(0.95, 1.05), c('red', 'white', 'green')), fontWeight = 'bold')
formatStyle(10,   backgroundColor = styleInterval(breaks_lead, colors), fontWeight = 'bold')  %>%
formatStyle(11,   backgroundColor = styleInterval(breaks_C2, colors), fontWeight = 'bold') %>%
formatStyle(12,   backgroundColor = styleInterval(breaks_sprzedaz, colors), fontWeight = 'bold')  %>%
formatStyle(13,   backgroundColor = styleInterval(breaks_srednia_cena, colors), fontWeight = 'bold') %>%
formatStyle(18,   backgroundColor = styleInterval(breaks_zmiana_laczna, colors), fontWeight = 'bold') %>%
#formatCurrency(c(5,9,14,15,16,17,18),' zl ', interval = 3, mark = " ", digits = 1) %>%
formatCurrency(c('srednia_cena_P','srednia_cena_A','wplyw_lead','wplyw_C2','wplyw_sprzedazy','wplyw_srednia_cena','zmiana_laczna'),' zl ', interval = 3, mark = " ", digits = 1) %>%
#formatPercentage(c(4,8,10,11,12,13), digits = 1) %>%
formatPercentage(c('C2_P','C2_A','lead','C2','sprzedaz','srednia_cena'), digits = 1) %>%
#formatRound(c(2,3,6,7), digits = 0, interval = 3, mark = " ",)
formatRound(c('N_lead_P','N_sprzedaz_P','N_lead_A','N_sprzedaz_A'), digits = 0, interval = 3, mark = " ")
dh<-df_list_final[paste0('df_final-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%
arrange(zmiana_laczna)%>% head(5) %>% fun_formatowanie_zmiennych()%>%  as_hux() %>%
set_contents(row=1,  value=c('Kraj/Organizator',rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'),2),
rep(c('N Lead', 'C2','N sprzedaz','Srednia cena'),2),'Zmiana TOTAL'))%>%
insert_row("", "Okres porownawczy", rep("",3),
"Okres analizowany", rep("",3),
"Zmiana", rep("",3),
"Wplyw na sprzedaz", rep("",1),
"Wplyw na obrot", rep("",1),
""
, after = 0) %>%
merge_cells(1, c(1:4)+1) %>%
merge_cells(1, c(5:8)+1) %>%
merge_cells(1, c(9:12)+1) %>%
merge_cells(1, c(13:16)+1) %>%
set_align(1, everywhere, "center") %>%
set_tb_padding(1, everywhere, 0) %>%
set_bold(1, everywhere)%>%
set_header_rows(1:2, TRUE) %>%
set_header_cols(1, TRUE) %>%
style_headers(bold = TRUE, text_color = "grey40") %>%
theme_orange() %>%
set_header_rows(1:2, TRUE) %>%
set_header_cols(1, TRUE) %>%
set_background_color(odds, c(1:4)+1, "orange") %>%
set_background_color(odds, c(5:8)+1, "grey80") %>%
style_headers(bold = TRUE, text_color = "grey40")
quick_html(dh, file = "ahuxtable1.html", open = FALSE)
# higher zoom increases resolution and image size
# you may need to run "webshot::install_phantomjs()" for this to work
webshot::webshot(url = "ahuxtable1.html", file = "ahuxtable1.png",
zoom = 1, selector = "table")
dh<-df_list_final[paste0('df_change-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>% group_by_at(input_wybor_obiekt) %>% arrange(desc(zmiana_laczna), .by_group = TRUE) %>% filter(!is.na(zmiana_laczna))  %>% slice(c(1,2,3,n()-2,n()-1, n())) %>% fun_formatowanie_zmiennych() %>%
as_hux() %>%
set_contents(row=1,  value=c('Kraj/Organizator','Kraj/Organizator',rep(c('N Lead', 'N sprzedaz','C2','Srednia cena'),2),
rep(c('N Lead', 'C2','N sprzedaz','Srednia cena'),2),'Zmiana TOTAL'))%>%
insert_row("","", "Okres porownawczy", rep("",3),
"Okres analizowany", rep("",3),
"Zmiana", rep("",3),
"Wplyw na sprzedaz", rep("",1),
"Wplyw na obrot", rep("",1),
""
, after = 0) %>%
merge_cells(1, c(1:4)+2) %>%
merge_cells(1, c(5:8)+2)%>%
merge_cells(1, c(9:12)+2) %>%
merge_cells(1, c(13:14)+2) %>%
merge_cells(1, c(15:16)+2) %>%
set_align(1, everywhere, "center") %>%
set_tb_padding(1, everywhere, 0) %>%
set_bold(1, everywhere)%>%
theme_orange() %>%
set_header_rows(1:2, TRUE) %>%
set_header_cols(1, TRUE) %>%
style_headers(bold = TRUE, text_color = "grey40")
quick_html(dh, file = "ahuxtable1.html", open = FALSE)
# higher zoom increases resolution and image size
# you may need to run "webshot::install_phantomjs()" for this to work
webshot::webshot(url = "ahuxtable1.html", file = "ahuxtable1.png",
zoom = 1, selector = "table")
DT::datatable(data = df_list_final[paste0('df_change-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%
group_by_at(input_wybor_obiekt) %>%
arrange(desc(zmiana_laczna), .by_group = TRUE),
filter='top',
extensions = 'Buttons',
options = list(dom = "Blfrtip",pageLength = 10, lengthMenu = c(10, 25, 200),scrollX=TRUE, buttons = c('copy', 'csv', 'excel'), columnDefs = list(list(className = 'dt-center',targets="_all"))),
rownames = FALSE,
container = sketch_df_change,
class = 'white-space: nowrap')  %>%
formatStyle(c(2:5)+1,  color = 'black', backgroundColor = 'Bisque', fontWeight = 'bold')  %>%
formatStyle(c(6:9)+1,  color = 'black', backgroundColor = 'Thistle', fontWeight = 'bold') %>%
formatCurrency(c('srednia_cena_P','srednia_cena_A','wplyw_lead','wplyw_C2','wplyw_sprzedazy','wplyw_srednia_cena','zmiana_laczna'),' zl ', interval = 3, mark = " ", digits = 1) %>%
formatPercentage(c('C2_P','C2_A','lead','C2','sprzedaz','srednia_cena'), digits = 1) %>%
formatRound(c('N_lead_P','N_sprzedaz_P','N_lead_A','N_sprzedaz_A'), digits = 0, interval = 3, mark = " ")
dh<-df_list_final[paste0('df_cena-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%  arrange(desc(zmiana_total)) %>% filter(!is.na(zmiana_total))  %>% slice(c(1,2,3,n()-2,n()-1, n())) %>% fun_formatowanie_zmiennych() %>%
as_hux() %>%
set_contents(row=1,  value=c('Kraj/Organizator','N sprzedaz','Udzial sprzedazy' ,'Srednia cena' , 'srednia_cena_znormaliz','N sprzedaz','Udzial sprzedazy' ,'Srednia cena',
rep(c('Udzial','cena'),2),'Zmiana TOTAL'))%>%
insert_row("", "Okres porownawczy", rep("",3),
"Okres analizowany", rep("",2),
"Zmiana", rep("",1),
"Wplyw", rep("",1),
""
, after = 0) %>%
merge_cells(1, c(1:4)+1) %>%
merge_cells(1, c(5:7)+1)%>%
merge_cells(1, c(8:9)+1) %>%
merge_cells(1, c(10:11)+1) %>%
set_align(1, everywhere, "center") %>%
set_tb_padding(1, everywhere, 0) %>%
set_bold(1, everywhere)%>%
theme_orange() %>%
set_header_rows(1:2, TRUE) %>%
set_header_cols(1, TRUE) %>%
style_headers(bold = TRUE, text_color = "grey40")
quick_html(dh, file = "ahuxtable1.html", open = FALSE)
# higher zoom increases resolution and image size
# you may need to run "webshot::install_phantomjs()" for this to work
webshot::webshot(url = "ahuxtable1.html", file = "ahuxtable1.png",
zoom = 1, selector = "table")
DT::datatable(data =  df_list_final[paste0('df_cena-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]],
filter='top',
extensions = 'Buttons',
options = list(dom = "Blfrtip",pageLength = 10, lengthMenu = c(10, 25, 200),scrollX=TRUE, buttons = c('copy', 'csv', 'excel'), columnDefs = list(list(className = 'dt-center',targets="_all"))),
rownames = FALSE,
container = sketch_df_cena,
class = "display") %>%
formatStyle(c(2:5),  color = 'black', backgroundColor = 'Bisque', fontWeight = 'bold')  %>%
formatStyle(c(6:8),  color = 'black', backgroundColor = 'Thistle', fontWeight = 'bold') %>%
formatCurrency(c('srednia_cena_P','srednia_cena_P_znormaliz','srednia_cena_A','zmiana_cena','wplyw_zmiany_udzialu','wplyw_zmiany_ceny','zmiana_total'),' zl ', interval = 3, mark = " ", digits = 1) %>%
formatPercentage(c('udzial_sprzedazy_A','udzial_sprzedazy_P','zmiana_udzial'), digits = 1) %>%
formatRound(c('N_sprzedaz_P','N_sprzedaz_A'), digits = 0, interval = 3, mark = " ")
df_list_final[paste0('df_final_channel_biggest_change-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%  arrange(desc(roznica_na_korzysc_CC)) %>% filter(!is.na(roznica_na_korzysc_CC))  %>% slice(c(1,2,3,n()-2,n()-1, n())) %>% fun_formatowanie_zmiennych() %>% tabela()
dh<-df_list_final[paste0('df_final_channel_biggest_change-',input_wybor_kanal,'-',okres_nazwa_skrot)][[1]] %>%  arrange(desc(roznica_na_korzysc_CC)) %>% filter(!is.na(roznica_na_korzysc_CC))  %>% slice(c(1,2,3,n()-2,n()-1, n())) %>% fun_formatowanie_zmiennych() %>%
as_hux() %>%
set_align(1, everywhere, "center") %>%
set_tb_padding(1, everywhere, 0) %>%
set_font_size(8) %>%
set_bold(1, everywhere)%>%
theme_orange() %>%
set_header_rows(1:2, TRUE) %>%
set_header_cols(1, TRUE) %>%
style_headers(bold = TRUE, text_color = "grey40")
quick_html(dh, file = "ahuxtable1.html", open = FALSE)
# higher zoom increases resolution and image size
# you may need to run "webshot::install_phantomjs()" for this to work
webshot::webshot(url = "ahuxtable1.html", file = "ahuxtable1.png",
zoom = 1, selector = "table")
fun_metric_decomposition(df_list[['df_c2-CC-rdr']]) %>% filter(udzial_P>0.05 | udzial_A>0.05) %>% mutate_if(is.numeric, scales::percent, accuracy=0.01) %>% tabela(filter_var='none', ile_zamrozic = 2)
doc_eval
x<- rbind(
df_list_final[paste0('df_final_tot-','CC','-',okres_nazwa_skrot)][[1]],
df_list_final[paste0('df_final_tot-','FO','-',okres_nazwa_skrot)][[1]],
df_list_final[paste0('df_final_tot-','CC','-','rdr')][[1]]
)  %>% cbind(data.frame(typ=c(paste0('CC','-',okres_nazwa_skrot),
paste0('FO','-',okres_nazwa_skrot),
paste0('CC','-','rdr'))),.) %>% select(-matches('_A$|_P$|wplyw')) %>% mutate_if(is.numeric,round,digits=2)
x1<-data.table::dcast(melt(x, id.vars = "typ"), variable ~ typ) %>% rename(element_funnelu=variable)
x1 %>% tabela(kolorowac_ujemne_dodatnie=TRUE,colnames_to_color=c('CC-rdr','CC-tdt','FO-tdt'),filter_var='none',
caption='zmiana wyrażony w procentach')
x1
x1
x1 %>% mutate(`FO-tdt`=ifelse(element_funnelu=='C2',NA,element_funnelu))
x1 %>% mutate(`FO-tdt`=ifelse(element_funnelu=='C2',NA,`FO-tdt`))
x1 %>%
#zmiana c2 jest wartoscia bezsensowna bo tam c2 powinna byc 100%
mutate(`FO-tdt`=ifelse(element_funnelu=='C2',NA,`FO-tdt`)) %>% tabela(kolorowac_ujemne_dodatnie=TRUE,colnames_to_color=c('CC-rdr','CC-tdt','FO-tdt'),filter_var='none',
caption='zmiana wyrażony w procentach')
df <- zapytanie_do_bazy(read_file('query/sprzedaz_po_latach.sql'))
View(df)
df <- zapytanie_do_bazy(read_file('query/sprzedaz_po_latach.sql'))
df <- zapytanie_do_bazy(read_file('query/sprzedaz_po_latach.sql'))
df %>%
ggplot(aes(x=month, y=n_sold_trip, color=department)) +
geom_line()
df %>%
ggplot(aes(x=month, y=n_sold_trip, color=department)) +
geom_line()+
facet_grid(year~.)
x<- rbind(
df_list_final[paste0('df_final_tot-','CC','-',okres_nazwa_skrot)][[1]],
df_list_final[paste0('df_final_tot-','FO','-',okres_nazwa_skrot)][[1]],
df_list_final[paste0('df_final_tot-','CC','-','rdr')][[1]]
)  %>% cbind(data.frame(typ=c(paste0('CC','-',okres_nazwa_skrot),
paste0('FO','-',okres_nazwa_skrot),
paste0('CC','-','rdr'))),.) %>% select(-matches('_A$|_P$|wplyw')) %>% mutate_if(is.numeric,round,digits=2)
x1<-data.table::dcast(melt(x, id.vars = "typ"), variable ~ typ) %>% rename(element_funnelu=variable)
x1 %>%
#zmiana c2 jest wartoscia bezsensowna bo tam c2 powinna byc 100%
mutate(`FO-tdt`=ifelse(element_funnelu=='C2',NA,`FO-tdt`)) %>% tabela(kolorowac_ujemne_dodatnie=TRUE,colnames_to_color=c('CC-rdr','CC-tdt','FO-tdt'),filter_var='none',
caption='zmiana wyrażony w procentach (nie w pkt %)')
#markdown ----
knitr::opts_chunk$set(#fig.width=12,
fig.height=4,
out.width = '100%'
)
knitr::opts_chunk$set(include =TRUE, #prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.
echo = FALSE, #echo = FALSE prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.
warning = FALSE,
message =FALSE,
collapse=TRUE,
error=TRUE
)
options(scipen=999)
library(reticulate)
myenvs=conda_list()
envname=myenvs$name[3]
use_condaenv(envname, required = TRUE)
Sys.setenv(RETICULATE_PYTHON = "/Users/lrabalski1/miniforge3/envs/everyday_use/bin/python")
reticulate::py_config()
library(DBI)
library(stringr)
library(stringi)
library(readr)
library(dplyr)
library(ggplot2)
library(RPostgreSQL)
library(readr)
library(data.table)
library(scales)
library(lubridate)
library(plotly)
#dla celow markdowna
library(kableExtra)
library(knitr)
library(DT)
reticulate::repl_python()
reticulate::repl_python()
